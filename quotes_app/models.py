from django.db import models
from django.core.exceptions import ValidationError


class Source(models.Model):
    SOURCE_TYPES = [
        ('movie', '–§–∏–ª—å–º'),
        ('book', '–ö–Ω–∏–≥–∞'),
    ]

    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    type = models.CharField(max_length=10, choices=SOURCE_TYPES, verbose_name="–¢–∏–ø")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "–ò—Å—Ç–æ—á–Ω–∏–∫"
        verbose_name_plural = "–ò—Å—Ç–æ—á–Ω–∏–∫–∏"
        unique_together = ['name', 'type']

    def __str__(self):
        return f"{self.get_type_display()}: {self.name}"


class Quote(models.Model):
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã")
    source = models.ForeignKey(Source, on_delete=models.CASCADE, verbose_name="–ò—Å—Ç–æ—á–Ω–∏–∫")
    weight = models.PositiveIntegerField(default=1, verbose_name="–í–µ—Å")
    views_count = models.PositiveIntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "–¶–∏—Ç–∞—Ç–∞"
        verbose_name_plural = "–¶–∏—Ç–∞—Ç—ã"

    def __str__(self):
        return f"{self.text[:50]}..." if len(self.text) > 50 else self.text

    def clean(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if Quote.objects.filter(text__iexact=self.text).exclude(pk=self.pk).exists():
            raise ValidationError("–¢–∞–∫–∞—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≤ 3 —Ü–∏—Ç–∞—Ç—ã –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
        if self.pk is None and Quote.objects.filter(source=self.source).count() >= 3:
            raise ValidationError("–£ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç (3)")


class Vote(models.Model):
    quote = models.ForeignKey(Quote, on_delete=models.CASCADE, related_name='votes')
    is_like = models.BooleanField(verbose_name="–õ–∞–π–∫")
    ip_address = models.GenericIPAddressField(verbose_name="IP –∞–¥—Ä–µ—Å")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "–ì–æ–ª–æ—Å"
        verbose_name_plural = "–ì–æ–ª–æ—Å–∞"
        unique_together = ['quote', 'ip_address']

    def __str__(self):
        return f"{'üëç' if self.is_like else 'üëé'} –¥–ª—è #{self.quote_id}"